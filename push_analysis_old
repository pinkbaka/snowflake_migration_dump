set BoQ =  '1/1/2020'; 
set EoQ =  '3/31/2020';


//set BoQ =  '4/1/2020'; 
//set EoQ =  '6/30/2020';
//set BoNQ =  '4/1/2021';
//set EoNQ =  '6/30/2021';
SELECT t1.name, t2.* FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITY" t1
left join"MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITYHISTORY" t2
on  t1.id = t2.opportunityid
where t1.name like '%Algorithmia%'
and t2.stagename not in ('1 First Call', '2 Discovery', '3 Business Case', '4 Product Validation', '5 Proposal',
                        'Stage 6: SOW Complete','Stage 4: SOW Signed', '6 Contract Signed','Stage 3: Validation',
                        'Trial - Completed', 'Trial - Active', 'Demo',
                            'Stage 2: In Active Scope',
                            'Stage 5: SOW Execution')
                             and date(t2.CREATEDDATE) >= $BoQ
                            and date(t2.CREATEDDATE) <=  $EoQ;
                            
SELECT OPPORTUNITYID,STAGENAME  , min(CREATEDDATE) as MIN_CDATE
--, rank () over (partition by OPPORTUNITYID order by  CREATEDDATE desc, id desc ) as changerank
FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITYHISTORY"

WHERE CREATEDDATE >= $BoQ  and  CREATEDDATE <= $EoQ  
    AND stagename not in ('1 First Call', '2 Discovery', '3 Business Case', '4 Product Validation', '5 Proposal',
                        'Stage 6: SOW Complete','Stage 4: SOW Signed', '6 Contract Signed','Stage 3: Validation',
                        'Trial - Completed', 'Trial - Active', 'Demo',
                            'Stage 2: In Active Scope',
                            'Stage 5: SOW Execution')
    AND  stagename not in ('Closed Lost', 'Closed Won', 'Disqualified')
    and opportunityid = '0065A00001YUGKFQA5'
group by 1,2 
order by 1,2;


CREATE OR REPLACE TABLE  "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" AS
(
SELECT OPPORTUNITYID,STAGENAME  , min(CREATEDDATE) as MIN_CDATE
--, rank () over (partition by OPPORTUNITYID order by  CREATEDDATE desc, id desc ) as changerank
FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITYHISTORY"
WHERE CREATEDDATE >= $BoQ  and  CREATEDDATE <= $EoQ  
    AND stagename not in ('1 First Call', '2 Discovery', '3 Business Case', '4 Product Validation', '5 Proposal',
                        'Stage 6: SOW Complete','Stage 4: SOW Signed', '6 Contract Signed','Stage 3: Validation',
                        'Trial - Completed', 'Trial - Active', 'Demo',
                            'Stage 2: In Active Scope',
                            'Stage 5: SOW Execution')
    AND  stagename not in ('Closed Lost', 'Closed Won', 'Disqualified')
      and opportunityid = '0065A00001YUGKFQA5'
group by 1,2 
order by 1,2
);


SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4_FINAL"
where name like '%Algor%';

SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS5"
where name like '%Algor%';

SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
where name like '%Algor%';

SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS7"
where name like '%Algor%';


SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS_FINAL"
where name like '%Algor%';

     CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS1"
        as (

            SELECT
                $BoQ as QTR_FirstDay,
                t1.id as opp_id, t1.name, t1.stagename as current_stage,t2.stagename as opphistory_stage, t1.ARR__C, BEST_ACCTSEGMENT_AT_CLOSE__SNW, t1.type, t1.createddate as opp_createdate, 
                t2.closedate as opphist_maxCloseDateinPeriod,  t1.closedate as opp_closedate, 
                t2.CREATEDDATE as OppChangeDate, 
                rank () over (partition by t1.ID order by  t2.CREATEDDATE desc, t2.id desc ) as changerank
            FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITY" t1
            left join "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITYHISTORY" t2
            on t1.id = t2.opportunityid
            where t1.CLOSEDATE >= $BoQ                    --@Parameter
                and date(t1.CREATEDDATE) <  $BoQ            --@Parameter
                and date(t2.CREATEDDATE) <  $BoQ             --@Parameter
                and t1.type in ('New Business', 'Renewal', 'Upsell')
                and t2.stagename not in ('1 First Call', '2 Discovery', '3 Business Case', '4 Product Validation', '5 Proposal',
                        'Stage 6: SOW Complete','Stage 4: SOW Signed', '6 Contract Signed','Stage 3: Validation',
                        'Trial - Completed', 'Trial - Active', 'Demo',
                            'Stage 2: In Active Scope',
                            'Stage 5: SOW Execution')
            --group by 1,2,3,4,5,6, 7,8,9,10,11,12
            order by 2, changerank)
    ;                            


SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS1" WHERE name like '%Algorithmia%';

        CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS2"
        as (
            SELECT 
                case when (OPPHIST_MAXCLOSEDATEINPERIOD  between $BoQ  and $EoQ ) then TRUE else FALSE end as hadCloseDateinCQ, 
                case when (OPPHIST_MAXCLOSEDATEINPERIOD  < $BoQ  ) then TRUE else FALSE end as hadCloseDateinPQ, 
                case when opp_closedate > $EoQ then TRUE else FALSE end as HasClosedDate_FQ,  
                case when opp_closedate > $EoQ and  (OPPHIST_MAXCLOSEDATEINPERIOD  between $BoQ and $EoQ  )
                then TRUE else FALSE end as pushed_NQ,  
                case when opp_closedate  between $BoQ  and $EoQ  then TRUE else FALSE end as CloseDateinCQ,
                case when OPPHIST_MAXCLOSEDATEINPERIOD > $EoQ then TRUE else FALSE end as HadCloseDate_FQ, 
                OPP_CLOSEDATE-OPPHIST_MAXCLOSEDATEINPERIOD as delta_PdMax_vs_OppClose, *
            FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS1"
            where  changerank = 1 
            )
        ;                            

            CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3"
            as (
            SELECT 
            case when hadCloseDateinCQ and HasClosedDate_FQ then 'pushed to NQ'
                when CloseDateinCQ and HadCloseDate_FQ then 'pulled from FQ'
                when hadCloseDateinCQ and CloseDateinCQ then 'set and close in CQ'
                when HasClosedDate_FQ then 'set to close in FQ'
                when hadCloseDateinPQ and CloseDateinCQ then 'zombie deal'
                else ' other' end as closecategory

            ,* FROM  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS2"
             order by 1 desc)
        ;                            




CREATE OR REPLACE TABLE  "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" AS
(
SELECT OPPORTUNITYID,STAGENAME  , min(CREATEDDATE) as MIN_CDATE
--, rank () over (partition by OPPORTUNITYID order by  CREATEDDATE desc, id desc ) as changerank
FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITYHISTORY"
WHERE CREATEDDATE >= $BoQ  and  CREATEDDATE <= $EoQ  
    AND stagename not in ('1 First Call', '2 Discovery', '3 Business Case', '4 Product Validation', '5 Proposal',
                        'Stage 6: SOW Complete','Stage 4: SOW Signed', '6 Contract Signed','Stage 3: Validation',
                        'Trial - Completed', 'Trial - Active', 'Demo',
                            'Stage 2: In Active Scope',
                            'Stage 5: SOW Execution')
    AND  stagename not in ('Closed Lost', 'Closed Won', 'Disqualified')
group by 1,2 
order by 1,2
);

SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4A"
where  name like '%armory.io%';

CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4A"
as 
(
    SELECT * , ifnull(STAGENAME,OPPHISTORY_STAGE) as IMPUTED_STAGE 
    FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3" t1
    LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" t2
    on t1.OPP_ID = t2.OPPORTUNITYID
);

    SELECT * , ifnull(STAGENAME,OPPHISTORY_STAGE) as IMPUTED_STAGE 
    FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3" t1
    LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" t2
    on t1.OPP_ID = t2.OPPORTUNITYID
  where name like '%Algorithmia%';

//SELECT * FROM (
//    SELECT * , ifnull(STAGENAME,OPPHISTORY_STAGE) as IMPUTED_STAGE,
//    rank () over (partition by OPP_ID, QTR_FIRSTDAY  order by  right(left(IMPUTED_STAGE,7),1)  ) as QTR_ORDER
//    FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3" t1
//    LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" t2
//    on t1.OPP_ID = t2.OPPORTUNITYID
//  where OPPHISTORY_STAGE <> IMPUTED_STAGE
//  )
//  where QTR_ORDER = 1;
//
CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4B"
as 
(

SELECT CLOSECATEGORY
,HADCLOSEDATEINCQ
,HADCLOSEDATEINPQ
,HASCLOSEDDATE_FQ
,PUSHED_NQ
,CLOSEDATEINCQ
,HADCLOSEDATE_FQ
,DELTA_PDMAX_VS_OPPCLOSE
,QTR_FIRSTDAY
,OPP_ID
,NAME
,CURRENT_STAGE
,OPPHISTORY_STAGE
,ARR__C
,BEST_ACCTSEGMENT_AT_CLOSE__SNW
,TYPE
,OPP_CREATEDATE
,OPPHIST_MAXCLOSEDATEINPERIOD
,OPP_CLOSEDATE
,OPPCHANGEDATE
,CHANGERANK
,OPPORTUNITYID
,STAGENAME
,MIN_CDATE
,OPPHISTORY_STAGE as IMPUTED_STAGE

FROM (
    SELECT * , ifnull(STAGENAME,OPPHISTORY_STAGE) as IMPUTED_STAGE,
    rank () over (partition by OPP_ID, QTR_FIRSTDAY  order by  right(left(IMPUTED_STAGE,7),1)  ) as QTR_ORDER
    FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3" t1
    LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" t2
    on t1.OPP_ID = t2.OPPORTUNITYID
  where OPPHISTORY_STAGE <> IMPUTED_STAGE
  )
  where QTR_ORDER = 1
);



  CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS1B"
        as (

            SELECT
                $BoQ as QTR_FirstDay,
                t1.id as opp_id, t1.name, t1.stagename as current_stage,t2.stagename as opphistory_stage, t1.ARR__C, BEST_ACCTSEGMENT_AT_CLOSE__SNW, t1.type, t1.createddate as opp_createdate, 
                t2.closedate as opphist_maxCloseDateinPeriod,  t1.closedate as opp_closedate, 
                t2.CREATEDDATE as OppChangeDate, 
                rank () over (partition by t1.ID order by  t2.CREATEDDATE desc, t2.id desc ) as changerank
            FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITY" t1
            left join "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITYHISTORY" t2
            on t1.id = t2.opportunityid
            where t1.CLOSEDATE >= $BoQ                    --@Parameter
                and date(t1.CREATEDDATE) <  $BoQ            --@Parameter
                and date(t2.CREATEDDATE) <= $EoQ             --@Parameter
                and t1.type in ('New Business', 'Renewal', 'Upsell')
                and t2.stagename not in ('1 First Call', '2 Discovery', '3 Business Case', '4 Product Validation', '5 Proposal',
                        'Stage 6: SOW Complete','Stage 4: SOW Signed', '6 Contract Signed','Stage 3: Validation',
                        'Trial - Completed', 'Trial - Active', 'Demo',
                            'Stage 2: In Active Scope',
                            'Stage 5: SOW Execution')
            --group by 1,2,3,4,5,6, 7,8,9,10,11,12
            order by 2, changerank);

        CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS2B"
        as (
            SELECT 
                case when (OPPHIST_MAXCLOSEDATEINPERIOD  between $BoQ  and $EoQ ) then TRUE else FALSE end as hadCloseDateinCQ, 
                case when (OPPHIST_MAXCLOSEDATEINPERIOD  < $BoQ  ) then TRUE else FALSE end as hadCloseDateinPQ, 
                case when opp_closedate > $EoQ then TRUE else FALSE end as HasClosedDate_FQ,  
                case when opp_closedate > $EoQ and  (OPPHIST_MAXCLOSEDATEINPERIOD  between $BoQ and $EoQ  )
                then TRUE else FALSE end as pushed_NQ,  
                case when opp_closedate  between $BoQ  and $EoQ  then TRUE else FALSE end as CloseDateinCQ,
                case when OPPHIST_MAXCLOSEDATEINPERIOD > $EoQ then TRUE else FALSE end as HadCloseDate_FQ, 
                OPP_CLOSEDATE-OPPHIST_MAXCLOSEDATEINPERIOD as delta_PdMax_vs_OppClose, *
            FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS1B"
            where  changerank = 1 
            )
        ;                            

            CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3B"
            as (
            SELECT 
            case when hadCloseDateinCQ and HasClosedDate_FQ then 'pushed to NQ'
                when CloseDateinCQ and HadCloseDate_FQ then 'pulled from FQ'
                when hadCloseDateinCQ and CloseDateinCQ then 'set and close in CQ'
                when HasClosedDate_FQ then 'set to close in FQ'
                when hadCloseDateinPQ and CloseDateinCQ then 'zombie deal'
                else ' other' end as closecategory

            ,* FROM  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS2B"
             order by 1 desc)
        ;                            
CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4C"
as 
(
    SELECT * , ifnull(STAGENAME,OPPHISTORY_STAGE) as IMPUTED_STAGE 
    FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3B" t1
    LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" t2
    on t1.OPP_ID = t2.OPPORTUNITYID
);
SELECT 'C',* FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4C"
where name like '%Algorithmia%';
SELECT * FROM
(
SELECT 'a', * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4A"
UNION
SELECT 'b',* FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4B"
UNION 
SELECT 'c',* FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4C"
) 
where name like '%Algorith%';


//SELECT  OPP_ID,name, QTR_FIRSTDAY,OPPHISTORY_STAGE,IMPUTED_STAGE FROM
//              (
// SELECT * , right(left(IMPUTED_STAGE,7),1),
//               rank () over (partition by OPP_ID, QTR_FIRSTDAY  order by  right(left(IMPUTED_STAGE,7),1)  ) as QTR_ORDER
//              FROM   "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS_FINAL"
//              where 
//                --name like '%Algorithmia%'and 
//                OPPHISTORY_STAGE <> IMPUTED_STAGE)
//where QTR_ORDER = 1
//              order by name, QTR_FIRSTDAY
//             ;             
              
            CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS5"
            as (
                SELECT OPP_ID, NAME
                    ,case when "'Stage 0: First Call'"                      is not null then 1 else 0 end as "S0" 
                    ,case when "'Stage 1: Initial Engagement'"              is not null then 1 else 0 end as "S1" 
                    ,case when "'Stage 2: Discovery'"                       is not null then 1 else 0 end as "S2" 
                    ,case when "'Stage 3: Business & Solution Alignment'"   is not null then 1 else 0 end  as "S3" 
                    ,case when "'Stage 4: Validation'"                      is not null then 1 else 0 end as "S4" 
                    ,case when "'Stage 5: Negotiation'"                     is not null then 1 else 0 end as "S5" 
                FROM               
                    (SELECT OPP_ID,NAME,IMPUTED_STAGE FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4")
                PIVOT(min(imputed_stage) for IMPUTED_STAGE in ('Stage 0: First Call',
                                                     'Stage 1: Initial Engagement',
                                                     'Stage 2: Discovery',
                                                     'Stage 3: Business & Solution Alignment',
                                                     'Stage 4: Validation',
                                                     'Stage 5: Negotiation')) as p
              );



              CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
              as (              
                SELECT 
                OPP_ID, NAME,
                case when s0 = 1                                then 'Stage 0: First Call'                    else NULL end as S0_Imputed,
                case when s0 > 0 and S2+S3+S4+S5 > 0  or s1 = 1 then 'Stage 1: Initial Engagement'            else NULL end as S1_Imputed, 
                case when s0+s1 > 0 and S3+S4+S5 > 0  or s2 = 1 then 'Stage 2: Discovery'                     else NULL end as S2_Imputed, 
                case when s0+s1+s2 > 0 and S4+S5 > 0  or s3 = 1 then 'Stage 3: Business & Solution Alignment' else NULL end as S3_Imputed, 
                case when s0+s1+s2+s3 > 0 and S5 > 0  or s4 = 1 then 'Stage 4: Validation'                    else NULL end as S4_Imputed, 
                case when s5 = 1                                then 'Stage 5: Negotiation'                   else NULL end as S5_Imputed
                 -- ,*
                FROM  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS5"
                ) ;
                CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
              as (  
                SELECT * 
                ,s0 = 1 as S0_Imputed 
                ,NULL as S1_Imputed 
                ,NULL as S2_Imputed 
                ,NULL as S3_Imputed 
                ,NULL as S4_Imputed 
                ,NULL as S5_Imputed 
                FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS5"
                ) ;
                
                SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
                where name like '%armory%';
                
                update "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
                set S0_Imputed = 'Stage 0: First Call'
                where  s0 = 1;
                
                update "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
                set S1_Imputed = 'Stage 1: Initial Engagement'
                where  s0 > 0 and S2+S3+S4+S5 > 0  or s1 = 1;
                
                update "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
                set S2_Imputed = 'Stage 2: Discovery'
                where s0+s1 > 0 and S3+S4+S5 > 0  or s2 = 1;
                
                update "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
                set S3_Imputed = 'Stage 3: Business & Solution Alignment'
                where  s0+s1+s2 > 0 and S4+S5 > 0  or s3 = 1;
                
                update "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
                set S4_Imputed = 'Stage 4: Validation'
                where  s0+s1+s2+s3 > 0 and S5 > 0  or s4 = 1;
                
                update "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
                set S5_Imputed = 'Stage 5: Negotiation'
                where  s5 = 1;
                
  

            CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
            as (              
              SELECT 
              OPP_ID, NAME,
              case when s0 = 1                                then 'Stage 0: First Call'                    else NULL end as S0_Imputed,
              case when s0 > 0 and S2+S3+S4+S5 > 0  or s1 = 1 then 'Stage 1: Initial Engagement'            else NULL end as S1_Imputed, 
              case when s0+s1 > 0 and S3+S4+S5 > 0  or s2 = 1 then 'Stage 2: Discovery'                     else NULL end as S2_Imputed, 
              case when s0+s1+s2 > 0 and S4+S5 > 0  or s3 = 1 then 'Stage 3: Business & Solution Alignment' else NULL end as S3_Imputed, 
              case when s0+s1+s2+s3 > 0 and S5 > 0  or s4 = 1 then 'Stage 4: Validation'                    else NULL end as S4_Imputed, 
              case when s5 = 1                                then 'Stage 5: Negotiation'                   else NULL end as S5_Imputed
               -- ,*
              FROM  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS5"
              );
              
              
                SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6";
               
             CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS7"
                as 
                (   
              select OPP_ID, NAME, IMPUTED_STAGE
              from  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
            unpivot(IMPUTED_STAGE for tmp in (S0_IMPUTED,
                            S1_IMPUTED,
                            S2_IMPUTED,
                            S3_IMPUTED,
                            S4_IMPUTED,
                            S5_IMPUTED))
                            order by name, tmp
              );
              
              SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS7";
              


    
        SELECT * FROM  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3";
    


          INSERT INTO "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS_FINAL"
              SELECT t1.*, t2.IMPUTED_STAGE
    FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3" t1
    LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS7" t2
    on t1.OPP_ID = t2.OPP_ID;



use "MTL_LOAD_TEST";

create or replace TABLE TMP_PUSHANALYSIS_FINAL (
	CLOSECATEGORY VARCHAR(19),
	HADCLOSEDATEINCQ BOOLEAN,
	HADCLOSEDATEINPQ BOOLEAN,
	HASCLOSEDDATE_FQ BOOLEAN,
	PUSHED_NQ BOOLEAN,
	CLOSEDATEINCQ BOOLEAN,
	HADCLOSEDATE_FQ BOOLEAN,
	DELTA_PDMAX_VS_OPPCLOSE NUMBER(9,0),
	QTR_FIRSTDAY TIMESTAMP_NTZ(9),
	OPP_ID VARCHAR(18),
	NAME VARCHAR(120),
	CURRENT_STAGE VARCHAR(255),
  	OPPHISTORY_STAGE VARCHAR(255),
	ARR__C NUMBER(18,2),
	BEST_ACCTSEGMENT_AT_CLOSE__SNW VARCHAR(5),
	TYPE VARCHAR(255),
	OPP_CREATEDATE TIMESTAMP_NTZ(9),
	OPPHIST_MAXCLOSEDATEINPERIOD DATE,
	OPP_CLOSEDATE DATE,
	OPPCHANGEDATE TIMESTAMP_NTZ(9),
	CHANGERANK NUMBER(18,0),
    OPPORTUNITYID VARCHAR(18),
    STAGENAME VARCHAR(255),
    MIN_CDATE TIMESTAMP_NTZ(9),
    IMPUTED_STAGE VARCHAR(255),
    COHORT VARCHAR(10),
    IMPUTED_STAGE_FINAL VARCHAR(255)
);




CREATE or replace PROCEDURE usp_QUARTER_PUSH_ANALYSIS(StartofQTR VARCHAR, EndofQTR VARCHAR)
  RETURNS VARCHAR
  LANGUAGE javascript
  AS
  $$
    var BoQ = STARTOFQTR; 
    var EoQ = ENDOFQTR;
    
    var sql_command = `
        // Create temp table to combine opportunity and opportunity history
        // Look at all the opportunities that came into a quarter
        CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS1"
        as (
            SELECT
                '${BoQ}' as QTR_FirstDay,
                t1.id as opp_id, t1.name, t1.stagename as current_stage,t2.stagename as opphistory_stage, t1.ARR__C, BEST_ACCTSEGMENT_AT_CLOSE__SNW, t1.type, t1.createddate as opp_createdate, 
                t2.closedate as opphist_maxCloseDateinPeriod,  t1.closedate as opp_closedate, 
                t2.CREATEDDATE as OppChangeDate, 
                rank () over (partition by t1.ID order by  t2.CREATEDDATE desc, t2.id desc ) as changerank
            FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITY" t1
            left join "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITYHISTORY" t2
            on t1.id = t2.opportunityid
            where t1.CLOSEDATE >= '${BoQ}'                     --@Parameter
                and date(t1.CREATEDDATE) <  '${BoQ}'               --@Parameter
//                and date(t2.CREATEDDATE) <=  '${EoQ}'             --@Parameter
                and date(t2.CREATEDDATE) <  '${BoQ}'             --@Parameter
                and t1.type in ('New Business', 'Renewal', 'Upsell')
                and t2.stagename not in ('1 First Call', '2 Discovery', '3 Business Case', '4 Product Validation', '5 Proposal',
                        'Stage 6: SOW Complete','Stage 4: SOW Signed', '6 Contract Signed','Stage 3: Validation',
                        'Trial - Completed', 'Trial - Active', 'Demo',
                            'Stage 2: In Active Scope',
                            'Stage 5: SOW Execution')
                //and t2.stagename not in ('Closed Won','Closed Lost', 'Disqualified')
            --group by 1,2,3,4,5,6, 7,8,9,10,11,12
            order by 2, changerank)
    `;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
    
    var sql_command = `
        // Create temp table to combine opportunity and opportunity history
        // Look at all the opportunities that came into a quarter
        CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS2"
        as (
            SELECT 
                case when (OPPHIST_MAXCLOSEDATEINPERIOD  between '${BoQ}' and '${EoQ}' ) then TRUE else FALSE end as hadCloseDateinCQ, 
                case when (OPPHIST_MAXCLOSEDATEINPERIOD  < '${BoQ}' ) then TRUE else FALSE end as hadCloseDateinPQ, 
                case when opp_closedate > '${EoQ}' then TRUE else FALSE end as HasClosedDate_FQ,  
                case when opp_closedate > '${EoQ}' and  (OPPHIST_MAXCLOSEDATEINPERIOD  between '${BoQ}' and '${EoQ}' )
                then TRUE else FALSE end as pushed_NQ,  
                case when opp_closedate  between '${BoQ}' and '${EoQ}'  then TRUE else FALSE end as CloseDateinCQ,
                case when OPPHIST_MAXCLOSEDATEINPERIOD > '${EoQ}' then TRUE else FALSE end as HadCloseDate_FQ, 
                OPP_CLOSEDATE-OPPHIST_MAXCLOSEDATEINPERIOD as delta_PdMax_vs_OppClose, *
            FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS1"
            where  changerank = 1 
            )
        `;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
    
    var sql_command = `
            CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3"
            as (
            SELECT 
            case when hadCloseDateinCQ and HasClosedDate_FQ then 'pushed to NQ'
                when CloseDateinCQ and HadCloseDate_FQ then 'pulled from FQ'
                when hadCloseDateinCQ and CloseDateinCQ then 'set and close in CQ'
                when HasClosedDate_FQ then 'set to close in FQ'
                when hadCloseDateinPQ and CloseDateinCQ then 'zombie deal'
                else ' other' end as closecategory

            ,* FROM  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS2"
             order by 1 desc)
        `;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 

// C versions
    var sql_command = `
        // Create temp table to combine opportunity and opportunity history
        // Look at all the opportunities that came into a quarter
        CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS1C"
        as (
            SELECT
                '${BoQ}' as QTR_FirstDay,
                t1.id as opp_id, t1.name, t1.stagename as current_stage,t2.stagename as opphistory_stage, t1.ARR__C, BEST_ACCTSEGMENT_AT_CLOSE__SNW, t1.type, t1.createddate as opp_createdate, 
                t2.closedate as opphist_maxCloseDateinPeriod,  t1.closedate as opp_closedate, 
                t2.CREATEDDATE as OppChangeDate, 
                rank () over (partition by t1.ID order by  t2.CREATEDDATE desc, t2.id desc ) as changerank
            FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITY" t1
            left join "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITYHISTORY" t2
            on t1.id = t2.opportunityid
            where t1.CLOSEDATE >= '${BoQ}'                     --@Parameter
                and date(t1.CREATEDDATE) <  '${BoQ}'               --@Parameter
                and date(t2.CREATEDDATE) <=  '${EoQ}'             --@Parameter
//                and date(t2.CREATEDDATE) <  '${BoQ}'             --@Parameter
                and t1.type in ('New Business', 'Renewal', 'Upsell')
                and t2.stagename not in ('1 First Call', '2 Discovery', '3 Business Case', '4 Product Validation', '5 Proposal',
                        'Stage 6: SOW Complete','Stage 4: SOW Signed', '6 Contract Signed','Stage 3: Validation',
                        'Trial - Completed', 'Trial - Active', 'Demo',
                            'Stage 2: In Active Scope',
                            'Stage 5: SOW Execution')
                and t2.stagename not in ('Closed Won','Closed Lost', 'Disqualified')
            --group by 1,2,3,4,5,6, 7,8,9,10,11,12
            order by 2, changerank)
    `;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
//                where t1.CLOSEDATE >= '${BoQ}'                     --@Parameter
//                and date(t1.CREATEDDATE) <  '${BoQ}'               --@Parameter
////                and date(t2.CREATEDDATE) <=  '${EoQ}'             --@Parameter
//                and date(t2.CREATEDDATE) <  '${BoQ}'             --@Parameter
    var sql_command = `
        // Create temp table to combine opportunity and opportunity history
        // Look at all the opportunities that came into a quarter
        CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS2C"
        as (
            SELECT 
                case when (OPPHIST_MAXCLOSEDATEINPERIOD  between '${BoQ}' and '${EoQ}' ) then TRUE else FALSE end as hadCloseDateinCQ, 
                case when (OPPHIST_MAXCLOSEDATEINPERIOD  < '${BoQ}' ) then TRUE else FALSE end as hadCloseDateinPQ, 
                case when opp_closedate > '${EoQ}' then TRUE else FALSE end as HasClosedDate_FQ,  
                case when opp_closedate > '${EoQ}' and  (OPPHIST_MAXCLOSEDATEINPERIOD  between '${BoQ}' and '${EoQ}' )
                then TRUE else FALSE end as pushed_NQ,  
                case when opp_closedate  between '${BoQ}' and '${EoQ}'  then TRUE else FALSE end as CloseDateinCQ,
                case when OPPHIST_MAXCLOSEDATEINPERIOD > '${EoQ}' then TRUE else FALSE end as HadCloseDate_FQ, 
                OPP_CLOSEDATE-OPPHIST_MAXCLOSEDATEINPERIOD as delta_PdMax_vs_OppClose, *
            FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS1C"
            where  changerank = 1 
            )
        `;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
    
    var sql_command = `
            CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3C"
            as (
            SELECT 
            case when hadCloseDateinCQ and HasClosedDate_FQ then 'pushed to NQ'
                when CloseDateinCQ and HadCloseDate_FQ then 'pulled from FQ'
                when hadCloseDateinCQ and CloseDateinCQ then 'set and close in CQ'
                when HasClosedDate_FQ then 'set to close in FQ'
                when hadCloseDateinPQ and CloseDateinCQ then 'zombie deal'
                else ' other' end as closecategory

            ,* FROM  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS2C"
             order by 1 desc)
        `;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
  
  
  
    
    var sql_command = `
          CREATE OR REPLACE TABLE  "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" 
          AS
          (
          SELECT OPPORTUNITYID,STAGENAME  , min(CREATEDDATE) as MIN_CDATE
          --, rank () over (partition by OPPORTUNITYID order by  CREATEDDATE desc, id desc ) as changerank
          FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITYHISTORY"
          WHERE CREATEDDATE >= '${BoQ}'  and  CREATEDDATE <= '${EoQ}'  
              AND stagename not in ('1 First Call', '2 Discovery', '3 Business Case', '4 Product Validation', '5 Proposal',
                                  'Stage 6: SOW Complete','Stage 4: SOW Signed', '6 Contract Signed','Stage 3: Validation',
                                  'Trial - Completed', 'Trial - Active', 'Demo',
                                      'Stage 2: In Active Scope',
                                      'Stage 5: SOW Execution')
          group by 1,2 
          order by 1,2
          )`;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
    
    var sql_command = `
            CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4A"
            as 
            (
                SELECT * , ifnull(STAGENAME,OPPHISTORY_STAGE) as IMPUTED_STAGE 
                FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3" t1
                LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" t2
                on t1.OPP_ID = t2.OPPORTUNITYID
            )`;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
              
    var sql_command = `
            CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4C"
            as 
            (
                SELECT * , ifnull(STAGENAME,OPPHISTORY_STAGE) as IMPUTED_STAGE 
                FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3C" t1
                LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" t2
                on t1.OPP_ID = t2.OPPORTUNITYID
            )`;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute();  
              
        var sql_command = `
            CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4B"
              as 
              (

              SELECT CLOSECATEGORY
              ,HADCLOSEDATEINCQ
              ,HADCLOSEDATEINPQ
              ,HASCLOSEDDATE_FQ
              ,PUSHED_NQ
              ,CLOSEDATEINCQ
              ,HADCLOSEDATE_FQ
              ,DELTA_PDMAX_VS_OPPCLOSE
              ,QTR_FIRSTDAY
              ,OPP_ID
              ,NAME
              ,CURRENT_STAGE
              ,OPPHISTORY_STAGE
              ,ARR__C
              ,BEST_ACCTSEGMENT_AT_CLOSE__SNW
              ,TYPE
              ,OPP_CREATEDATE
              ,OPPHIST_MAXCLOSEDATEINPERIOD
              ,OPP_CLOSEDATE
              ,OPPCHANGEDATE
              ,CHANGERANK
              ,OPPORTUNITYID
              ,STAGENAME
              ,MIN_CDATE
              ,OPPHISTORY_STAGE as IMPUTED_STAGE

              FROM (
                  SELECT * , ifnull(STAGENAME,OPPHISTORY_STAGE) as IMPUTED_STAGE,
                  rank () over (partition by OPP_ID, QTR_FIRSTDAY  order by  right(left(IMPUTED_STAGE,7),1)  ) as QTR_ORDER
                  FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3" t1
                  LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."SNW_OPP_HIST_STAGES_TMP" t2
                  on t1.OPP_ID = t2.OPPORTUNITYID
                where OPPHISTORY_STAGE <> IMPUTED_STAGE
                )
                where QTR_ORDER = 1
              )`;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
              
              
        var sql_command = `
            CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4_FINAL"
            as 
            (
                SELECT *, 'A' as cohort FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4A"
                UNION
                SELECT *, 'B' as cohort FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4B"
                UNION
                SELECT *, 'C' as cohort FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4C"
            )`;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
              
            
         var sql_command = `
              CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS5"
            as (
                SELECT OPP_ID, NAME
                    ,case when "'Stage 0: First Call'"                      is not null then 1 else 0 end as "S0" 
                    ,case when "'Stage 1: Initial Engagement'"              is not null then 1 else 0 end as "S1" 
                    ,case when "'Stage 2: Discovery'"                       is not null then 1 else 0 end as "S2" 
                    ,case when "'Stage 3: Business & Solution Alignment'"   is not null then 1 else 0 end  as "S3" 
                    ,case when "'Stage 4: Validation'"                      is not null then 1 else 0 end as "S4" 
                    ,case when "'Stage 5: Negotiation'"                     is not null then 1 else 0 end as "S5" 
                FROM               
                    (SELECT OPP_ID,NAME,IMPUTED_STAGE FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4_FINAL")
                PIVOT(min(imputed_stage) for IMPUTED_STAGE in ('Stage 0: First Call',
                                                     'Stage 1: Initial Engagement',
                                                     'Stage 2: Discovery',
                                                     'Stage 3: Business & Solution Alignment',
                                                     'Stage 4: Validation',
                                                     'Stage 5: Negotiation')) as p
              )`;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
              
    var sql_command = `
              CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
              as (              
                SELECT 
                OPP_ID, NAME,
                case when s0 = 1                                then 'Stage 0: First Call'                    else NULL end as S0_Imputed,
                case when s0 > 0 and S2+S3+S4+S5 > 0  or s1 = 1 then 'Stage 1: Initial Engagement'            else NULL end as S1_Imputed, 
                case when s0+s1 > 0 and S3+S4+S5 > 0  or s2 = 1 then 'Stage 2: Discovery'                     else NULL end as S2_Imputed, 
                case when s0+s1+s2 > 0 and S4+S5 > 0  or s3 = 1 then 'Stage 3: Business & Solution Alignment' else NULL end as S3_Imputed, 
                case when s0+s1+s2+s3 > 0 and S5 > 0  or s4 = 1 then 'Stage 4: Validation'                    else NULL end as S4_Imputed, 
                case when s5 = 1                                then 'Stage 5: Negotiation'                   else NULL end as S5_Imputed
                 -- ,*
                FROM  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS5"
                ) `;                   
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
              
              
              
    var sql_command = `
                 CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS7"
                as 
                (   
                select OPP_ID, NAME, IMPUTED_STAGE
                from  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6"
                unpivot(IMPUTED_STAGE for tmp in (S0_IMPUTED,
                            S1_IMPUTED,
                            S2_IMPUTED,
                            S3_IMPUTED,
                            S4_IMPUTED,
                            S5_IMPUTED))
                            order by name, tmp
                )`;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
            
    var sql_command = `
           INSERT INTO "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS_FINAL"
              SELECT t1.*, t2.IMPUTED_STAGE as IMPUTED_STAGE_FINAL
              FROM  "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS4_FINAL" t1
              LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS7" t2
              on t1.OPP_ID = t2.OPP_ID
              //and t1.IMPUTED_STAGE = t2.IMPUTED_STAGE
              `;                            
    var statement = snowflake.createStatement( {sqlText: sql_command} );
    var result_set = statement.execute(); 
    
  return 'Done.';
  $$;



call usp_QUARTER_PUSH_ANALYSIS( '1/1/2020', '3/31/2020');
call usp_QUARTER_PUSH_ANALYSIS( '4/1/2020', '6/30/2020');
call usp_QUARTER_PUSH_ANALYSIS( '7/1/2020', '9/30/2020');
call usp_QUARTER_PUSH_ANALYSIS('10/1/2020','12/31/2020');
call usp_QUARTER_PUSH_ANALYSIS( '1/1/2021', '3/31/2021');
call usp_QUARTER_PUSH_ANALYSIS( '4/1/2021', '6/30/2021');

SELECT * FROM              "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3" where name like '%Wire - Adv%';               
              
SELECT * FROM              "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS5"  where  name like '%Wire - Adv%';    like '%armory.io%';
SELECT * FROM              "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS6" where name like '%Wire - Adv%';   
SELECT * FROM              "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS7" ; where  name like '%armory.io%';
 SELECT t1.*, t2.IMPUTED_STAGE
              FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS3" t1
              LEFT JOIN   "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS7" t2
              on t1.OPP_ID = t2.OPP_ID
              where IMPUTED_STAGE = 'Stage 5: Negotiation'
              and type = 'New Business'
              And BEST_ACCTSEGMENT_AT_CLOSE__SNW = 'EC'
              ;             
SELECT left(QTR_FIRSTDAY,10) RPT_QTR, NAME as n2, IMPUTED_STAGE_FINAL,* 
              FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS_FINAL"
              where name like '%armory%'-- or 
       --       name like '%armory.io%'  Algorithmia
--where OPPSHISTORY_STAGE not like '%Stage%'
order by name,QTR_FIRSTDAY;
   SELECT BEST_ACCTSEGMENT_AT_CLOSE__SNW,  type,  left(QTR_FIRSTDAY,10) as RPT_QTR, IMPUTED_STAGE_FINAL, CLOSECATEGORY

 --,  * 
 FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS_FINAL"
   where name like '%armory%'
 group by 1,2,3,4,5
 order by 1,2,3,4,5
              ;
              
 CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."SNW_PUSH_RATE_ANALYSIS_UNPIVOT" AS
(
   SELECT BEST_ACCTSEGMENT_AT_CLOSE__SNW,  type,  left(QTR_FIRSTDAY,10) as RPT_QTR, IMPUTED_STAGE, CLOSECATEGORY
 , count(*) as CT
 --,  * 
 FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS_FINAL"
   where IMPUTED_STAGE is not null
  --where OPPSHISTORY_STAGE like '%Stage%'
 group by 1,2,3,4,5
 order by 1,2,3,4,5
);
SELECT *FROM "MTL_LOAD_TEST"."PUBLIC"."SNW_PUSH_RATE_ANALYSIS_UNPIVOT"
--where OPPSHISTORY_STAGE not like '%Stage%'
;




 CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."SNW_PUSH_RATE_ANALYSIS_PIVOT_TMP1" AS
(
SELECT *
FROM "MTL_LOAD_TEST"."PUBLIC"."SNW_PUSH_RATE_ANALYSIS_UNPIVOT"
PIVOT(SUM(CT) for CLOSECATEGORY in (
                                    'pulled from FQ',
                                    'pushed to NQ',
                                    'set and close in CQ',
                                    'set to close in FQ',
                                    'zombie deal'
                                    ))
);


 CREATE OR REPLACE TABLE "MTL_LOAD_TEST"."PUBLIC"."SNW_PUSH_RATE_ANALYSIS_PIVOT_TMP2" AS
(
SELECT BEST_ACCTSEGMENT_AT_CLOSE__SNW , TYPE, RPT_QTR, IMPUTED_STAGE,
IFNULL("'pulled from FQ'",0)      as PULL_FROM_FQ,
IFNULL("'pushed to NQ'",0)        as PUSHED_TO_NQ,
IFNULL("'set and close in CQ'",0) as SETCLOSED_IN_CQ,
IFNULL("'set to close in FQ'",0)  as SETCLOSED_IN_NQ,
IFNULL("'zombie deal'",0)         as REVIVED_FROM_PQ
FROM "MTL_LOAD_TEST"."PUBLIC"."SNW_PUSH_RATE_ANALYSIS_PIVOT_TMP1"
);

CREATE OR REPLACE VIEW "TABLEAU_REPORTING"."PUBLIC"."OPP_PUSH_ANALYSIS_V1" as
(

SELECT *,
PULL_FROM_FQ+SETCLOSED_IN_CQ+REVIVED_FROM_PQ as CLOSED_IN_Q,
PULL_FROM_FQ+SETCLOSED_IN_CQ+REVIVED_FROM_PQ+ PUSHED_TO_NQ as DENOMINATOR,
DIV0(CLOSED_IN_Q,DENOMINATOR) as CLOSE_RATE,
1-CLOSE_RATE as PUSH_RATE
FROM  "MTL_LOAD_TEST"."PUBLIC"."SNW_PUSH_RATE_ANALYSIS_PIVOT_TMP2" 
order by 3
);



SELECT * FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITY"
where --stagename = 'Closed Won' and 
BEST_ACCTSEGMENT_AT_CLOSE__SNW = 'EC'
and type = 'New Business'
and closedate >='10/1/2020'
and closedate < '1/1/2021'
and createddate <'10/1/2020'
              and isclosed 
order by stagename, name;


SELECT * FROM "MTL_LOAD_TEST"."PUBLIC"."TMP_PUSHANALYSIS_FINAL"
WHERE QTR_FIRSTDAY = '2020-10-01'
and BEST_ACCTSEGMENT_AT_CLOSE__SNW = 'EC'
and CLOSECATEGORY <> 'set to close in FQ'
and type ='New Business'
order by IMPUTED_STAGE ;

SELECT t1.name, t1.stagename, t1.closedate, t2.stagename, min(t2.createddate) FROM "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITY" t1
              left join "MTL_LOAD_PRE"."PUBLIC"."TARGET_OPPORTUNITYHISTORY" t2
              on t1.ID = t2.OpportunityID
where --stagename = 'Closed Won' and 
t1.BEST_ACCTSEGMENT_AT_CLOSE__SNW = 'EC'
and t1.type = 'New Business'
and t1.closedate >='10/1/2020'
and t1.closedate < '1/1/2021'
and t1.createddate <'10/1/2020'
              and t1.isclosed 
              and t2.stagename like '%Stage 5%'
              group by 1,2,3,4
order by t1.stagename, t1.name;              
              
